{"ast":null,"code":"var _jsxFileName = \"/Users/liamgates/Desktop/campuswire-stats/campuswire-stats/client/src/components/trendbar/trendbar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './trendbar.css';\nimport TrendOption from '../trend-option/trend-option';\nimport mock_data from '../../mock/mock.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Trendbar() {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n  const [error, setError] = useState(null); // Add error state\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Fetching data...');\n        const response = await fetch('http://localhost:5001/get_words', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(mock_data)\n        });\n        const data = await response.json();\n        console.log('Data received:', data);\n        setData(data);\n      } catch (error) {\n        console.error('Error:', error);\n        setError(error);\n      } finally {\n        setLoading(false); // Update the loading state in both success and error cases\n      }\n    };\n\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trendbar-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n  let wordList = data[\"words\"];\n  const options = wordList.map((elem, idx) => /*#__PURE__*/_jsxDEV(TrendOption, {\n    name: elem\n  }, idx, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 47\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trendbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trendbar-title\",\n      children: \"Trending \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trendbar-options\",\n      children: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Trendbar, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\n_c = Trendbar;\nexport default Trendbar;\nvar _c;\n$RefreshReg$(_c, \"Trendbar\");","map":{"version":3,"names":["React","useState","useEffect","TrendOption","mock_data","jsxDEV","_jsxDEV","Trendbar","_s","data","setData","loading","setLoading","error","setError","fetchData","console","log","response","fetch","method","headers","body","JSON","stringify","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","wordList","options","map","elem","idx","name","_c","$RefreshReg$"],"sources":["/Users/liamgates/Desktop/campuswire-stats/campuswire-stats/client/src/components/trendbar/trendbar.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './trendbar.css';\nimport TrendOption from '../trend-option/trend-option';\nimport mock_data from '../../mock/mock.json';\n\nfunction Trendbar() {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n  const [error, setError] = useState(null); // Add error state\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Fetching data...');\n        const response = await fetch('http://localhost:5001/get_words', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(mock_data)\n        });\n        const data = await response.json();\n        console.log('Data received:', data);\n        setData(data);\n      } catch (error) {\n        console.error('Error:', error);\n        setError(error);\n      } finally {\n        setLoading(false); // Update the loading state in both success and error cases\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"trendbar-loading\">\n        <div className=\"spinner\"></div>\n        <p>Loading...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  let wordList = data[\"words\"] as string[];\n  const options = wordList.map((elem, idx) => <TrendOption key={idx} name={elem} />);\n\n  return (\n    <div className=\"trendbar\">\n      <div className=\"trendbar-title\">Trending </div>\n      <div className=\"trendbar-options\">{options}</div>\n    </div>\n  );\n}\n\nexport default Trendbar;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AACvB,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,SAAS,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;UAC9DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACpB,SAAS;QAChC,CAAC,CAAC;QACF,MAAMK,IAAI,GAAG,MAAMS,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAER,IAAI,CAAC;QACnCC,OAAO,CAACD,IAAI,CAAC;MACf,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdG,OAAO,CAACH,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BC,QAAQ,CAACD,KAAK,CAAC;MACjB,CAAC,SAAS;QACRD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE;IACX,oBACEL,OAAA;MAAKoB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BrB,OAAA;QAAKoB,SAAS,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC/BzB,OAAA;QAAAqB,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAEV;EAEA,IAAIlB,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAqB,QAAA,GAAK,SAAO,EAACd,KAAK,CAACmB,OAAO;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC1C;EAEA,IAAIE,QAAQ,GAAGxB,IAAI,CAAC,OAAO,CAAa;EACxC,MAAMyB,OAAO,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,kBAAK/B,OAAA,CAACH,WAAW;IAAWmC,IAAI,EAAEF;EAAK,GAAhBC,GAAG;IAAAT,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAe,CAAC,CAAC;EAElF,oBACEzB,OAAA;IAAKoB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBrB,OAAA;MAAKoB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/CzB,OAAA;MAAKoB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAEO;IAAO;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAACvB,EAAA,CApDQD,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAsDjB,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}